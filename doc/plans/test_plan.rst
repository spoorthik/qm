.. _Test_plan:

Zephyr Test Plan
########################

This document provides a general introduction of the Zephyr Test Plan.
Zephyr provides test suite for various functionalities offered in
the project.

Kernel services and capabilities
================================
    Services offered by kernel like memory management, scheduling,
    interrupt services, timers and data passing mechanisms are verified
    with API level testing and functionality testing.
    :ref:`_kernel_plan`

Networking services
===================
    Various protocols including HTTP, COAP, MQTT, ARP, 6lo, TCP, UDP
    and other protocols are verified.

Sensor subsystem support
========================
    Zephyr sensor driver is validated to measure physical parameters
    such as temperature, pressure, ambience, humidity,
    light intensity, proximity and other real time sensory information.

File system
===========
    Newtron Flash Filesystem (NFFS) and FATFS support, FCB
    (Flash Circular Buffer) for memory constrained applications, and
    file system enhancements for logging and configuration are verified.

Device Driver support
=====================
    Device drivers such as GPIO, I2C, I2S, SPI, RTC, UART, AIO and
    other driver functionalities are verified.

Power management services
=========================
    Power management services such as tickless idle and an advanced
    idling infrastructure are also verified.

Test Strategy and Approach
**************************

Zephyr test suite contains various test types such as

Component level test
   Test against single Zephyr module.

API level test
   Test correctness of Zephyr APIs made available for application
   developer.

Stress test
   Thorough and intense tests to ensure robustness of Zephyr components.

Security test
   Intended to reveal flaws in the security mechanisms such memory
   protection implementation and stack corruption check.

Performance test
   Testing done against key performance indicators to ensure
   effectiveness of Zephyr.

Integration test
   Individual components are combined and verified as a group.

Test coverage
    Describes the degree to which the source code is executed
    when a particular test suite runs.

Zephyr Test Framework - Ztest
*****************************

The Zephyr Test Framework (Ztest) provides a simple testing framework
intended to be used during development. It provides basic assertion
macros and a generic test structure. The framework can be used in
two ways, either as a generic framework for integration testing,
or for unit testing specific modules.

Each test name has to be unique, prefixed with test\_ and documented
using doxygen.

Debug and result analysis are done using TC_PRINT function.

Detailed explanation about the testing APIs and their usage in
test applications is given in the :ref:`testing` documentation.

Test Methodology
****************

Test Setup
==========

Zephyr test setup contains

Test Client
    Test client triggers the test, the test can be triggered component
    wise or test suite wise.

Device Under Test
   Device Under Test could be various boards belonging to different
   architectures supported by Zephyr.

Test Server or CI
   Test server or CI infrastructure executes the test triggered by
   the client which has capabilities to efficiently manage load
   and resource constraints.

Test report generation tool
   Test report generation tool extracts the logs generated by the
   execution process and provides a user friendly report of test
   execution pass, fail, blocked or skipped with information to
   root cause the failures.

Test Execution
==============

Zephyr tests can be executed in two ways:

Manual execution
   Tests are run manually on the test client and Device Under Test
   is connected to the Test client itself. Reports are manually fed
   to report generation tool to obtain the results.

Automated execution
    Tests are run on test servers or CI, where tests are triggered
    through the test client.  The entire test execution and report
    generation is taken care automatically.

Bug Triaging
============

Bug triaging is a process where the tracked issues are screened
and prioritized. Triaging should help us to ensure that we appropriately
manage all reported issues, bugs as well as improvements.

The report generated after test execution process is evaluated and test
failures are grouped based on the severity of the issue. The failures
are reproduced to further investigate on the issue and they are reported.
Once the fix is merged, they are reverified to check if the issue is
resolved.


.. toctree::
   :maxdepth: 2

   kernel/kernel_plan.rst

